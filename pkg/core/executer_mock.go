// Code generated by mockery v2.50.0. DO NOT EDIT.

//go:build !compile

package core

import mock "github.com/stretchr/testify/mock"

// MockExecuter is an autogenerated mock type for the Executer type
type MockExecuter struct {
	mock.Mock
}

type MockExecuter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecuter) EXPECT() *MockExecuter_Expecter {
	return &MockExecuter_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *MockExecuter) Execute(_a0 ExecutionContext) (Executer, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 Executer
	var r1 error
	if rf, ok := ret.Get(0).(func(ExecutionContext) (Executer, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(ExecutionContext) Executer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Executer)
		}
	}

	if rf, ok := ret.Get(1).(func(ExecutionContext) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecuter_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockExecuter_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 ExecutionContext
func (_e *MockExecuter_Expecter) Execute(_a0 interface{}) *MockExecuter_Execute_Call {
	return &MockExecuter_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *MockExecuter_Execute_Call) Run(run func(_a0 ExecutionContext)) *MockExecuter_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ExecutionContext))
	})
	return _c
}

func (_c *MockExecuter_Execute_Call) Return(_a0 Executer, _a1 error) *MockExecuter_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecuter_Execute_Call) RunAndReturn(run func(ExecutionContext) (Executer, error)) *MockExecuter_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecuter creates a new instance of MockExecuter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecuter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecuter {
	mock := &MockExecuter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
