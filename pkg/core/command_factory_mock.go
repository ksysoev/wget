// Code generated by mockery v2.50.0. DO NOT EDIT.

//go:build !compile

package core

import mock "github.com/stretchr/testify/mock"

// MockCommandFactory is an autogenerated mock type for the CommandFactory type
type MockCommandFactory struct {
	mock.Mock
}

type MockCommandFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommandFactory) EXPECT() *MockCommandFactory_Expecter {
	return &MockCommandFactory_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: raw
func (_m *MockCommandFactory) Create(raw string) (Executer, error) {
	ret := _m.Called(raw)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 Executer
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (Executer, error)); ok {
		return rf(raw)
	}
	if rf, ok := ret.Get(0).(func(string) Executer); ok {
		r0 = rf(raw)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Executer)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(raw)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommandFactory_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCommandFactory_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - raw string
func (_e *MockCommandFactory_Expecter) Create(raw interface{}) *MockCommandFactory_Create_Call {
	return &MockCommandFactory_Create_Call{Call: _e.mock.On("Create", raw)}
}

func (_c *MockCommandFactory_Create_Call) Run(run func(raw string)) *MockCommandFactory_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCommandFactory_Create_Call) Return(_a0 Executer, _a1 error) *MockCommandFactory_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommandFactory_Create_Call) RunAndReturn(run func(string) (Executer, error)) *MockCommandFactory_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommandFactory creates a new instance of MockCommandFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommandFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommandFactory {
	mock := &MockCommandFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
