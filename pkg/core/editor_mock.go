// Code generated by mockery v2.50.0. DO NOT EDIT.

//go:build !compile

package core

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockEditor is an autogenerated mock type for the Editor type
type MockEditor struct {
	mock.Mock
}

type MockEditor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEditor) EXPECT() *MockEditor_Expecter {
	return &MockEditor_Expecter{mock: &_m.Mock}
}

// CommandMode provides a mock function with given fields: ctx, initBuffer
func (_m *MockEditor) CommandMode(ctx context.Context, initBuffer string) (string, error) {
	ret := _m.Called(ctx, initBuffer)

	if len(ret) == 0 {
		panic("no return value specified for CommandMode")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, initBuffer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, initBuffer)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, initBuffer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEditor_CommandMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommandMode'
type MockEditor_CommandMode_Call struct {
	*mock.Call
}

// CommandMode is a helper method to define mock.On call
//   - ctx context.Context
//   - initBuffer string
func (_e *MockEditor_Expecter) CommandMode(ctx interface{}, initBuffer interface{}) *MockEditor_CommandMode_Call {
	return &MockEditor_CommandMode_Call{Call: _e.mock.On("CommandMode", ctx, initBuffer)}
}

func (_c *MockEditor_CommandMode_Call) Run(run func(ctx context.Context, initBuffer string)) *MockEditor_CommandMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEditor_CommandMode_Call) Return(_a0 string, _a1 error) *MockEditor_CommandMode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEditor_CommandMode_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockEditor_CommandMode_Call {
	_c.Call.Return(run)
	return _c
}

// Edit provides a mock function with given fields: ctx, initBuffer
func (_m *MockEditor) Edit(ctx context.Context, initBuffer string) (string, error) {
	ret := _m.Called(ctx, initBuffer)

	if len(ret) == 0 {
		panic("no return value specified for Edit")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, initBuffer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, initBuffer)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, initBuffer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEditor_Edit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Edit'
type MockEditor_Edit_Call struct {
	*mock.Call
}

// Edit is a helper method to define mock.On call
//   - ctx context.Context
//   - initBuffer string
func (_e *MockEditor_Expecter) Edit(ctx interface{}, initBuffer interface{}) *MockEditor_Edit_Call {
	return &MockEditor_Edit_Call{Call: _e.mock.On("Edit", ctx, initBuffer)}
}

func (_c *MockEditor_Edit_Call) Run(run func(ctx context.Context, initBuffer string)) *MockEditor_Edit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEditor_Edit_Call) Return(_a0 string, _a1 error) *MockEditor_Edit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEditor_Edit_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockEditor_Edit_Call {
	_c.Call.Return(run)
	return _c
}

// SetInput provides a mock function with given fields: input
func (_m *MockEditor) SetInput(input <-chan KeyEvent) {
	_m.Called(input)
}

// MockEditor_SetInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetInput'
type MockEditor_SetInput_Call struct {
	*mock.Call
}

// SetInput is a helper method to define mock.On call
//   - input <-chan KeyEvent
func (_e *MockEditor_Expecter) SetInput(input interface{}) *MockEditor_SetInput_Call {
	return &MockEditor_SetInput_Call{Call: _e.mock.On("SetInput", input)}
}

func (_c *MockEditor_SetInput_Call) Run(run func(input <-chan KeyEvent)) *MockEditor_SetInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(<-chan KeyEvent))
	})
	return _c
}

func (_c *MockEditor_SetInput_Call) Return() *MockEditor_SetInput_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEditor_SetInput_Call) RunAndReturn(run func(<-chan KeyEvent)) *MockEditor_SetInput_Call {
	_c.Run(run)
	return _c
}

// NewMockEditor creates a new instance of MockEditor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEditor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEditor {
	mock := &MockEditor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
