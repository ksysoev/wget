// Code generated by mockery v2.46.3. DO NOT EDIT.

//go:build !compile

package core

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockConnectionHandler is an autogenerated mock type for the ConnectionHandler type
type MockConnectionHandler struct {
	mock.Mock
}

type MockConnectionHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnectionHandler) EXPECT() *MockConnectionHandler_Expecter {
	return &MockConnectionHandler_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: ctx, msg
func (_m *MockConnectionHandler) Send(ctx context.Context, msg string) error {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConnectionHandler_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockConnectionHandler_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
func (_e *MockConnectionHandler_Expecter) Send(ctx interface{}, msg interface{}) *MockConnectionHandler_Send_Call {
	return &MockConnectionHandler_Send_Call{Call: _e.mock.On("Send", ctx, msg)}
}

func (_c *MockConnectionHandler_Send_Call) Run(run func(ctx context.Context, msg string)) *MockConnectionHandler_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockConnectionHandler_Send_Call) Return(_a0 error) *MockConnectionHandler_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectionHandler_Send_Call) RunAndReturn(run func(context.Context, string) error) *MockConnectionHandler_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SetOnMessage provides a mock function with given fields: _a0
func (_m *MockConnectionHandler) SetOnMessage(_a0 func([]byte)) {
	_m.Called(_a0)
}

// MockConnectionHandler_SetOnMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOnMessage'
type MockConnectionHandler_SetOnMessage_Call struct {
	*mock.Call
}

// SetOnMessage is a helper method to define mock.On call
//   - _a0 func([]byte)
func (_e *MockConnectionHandler_Expecter) SetOnMessage(_a0 interface{}) *MockConnectionHandler_SetOnMessage_Call {
	return &MockConnectionHandler_SetOnMessage_Call{Call: _e.mock.On("SetOnMessage", _a0)}
}

func (_c *MockConnectionHandler_SetOnMessage_Call) Run(run func(_a0 func([]byte))) *MockConnectionHandler_SetOnMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func([]byte)))
	})
	return _c
}

func (_c *MockConnectionHandler_SetOnMessage_Call) Return() *MockConnectionHandler_SetOnMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConnectionHandler_SetOnMessage_Call) RunAndReturn(run func(func([]byte))) *MockConnectionHandler_SetOnMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnectionHandler creates a new instance of MockConnectionHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnectionHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnectionHandler {
	mock := &MockConnectionHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
