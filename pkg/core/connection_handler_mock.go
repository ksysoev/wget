// Code generated by mockery v2.46.3. DO NOT EDIT.

//go:build !compile

package core

import mock "github.com/stretchr/testify/mock"

// MockConnectionHandler is an autogenerated mock type for the ConnectionHandler type
type MockConnectionHandler struct {
	mock.Mock
}

type MockConnectionHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnectionHandler) EXPECT() *MockConnectionHandler_Expecter {
	return &MockConnectionHandler_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockConnectionHandler) Close() {
	_m.Called()
}

// MockConnectionHandler_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockConnectionHandler_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockConnectionHandler_Expecter) Close() *MockConnectionHandler_Close_Call {
	return &MockConnectionHandler_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockConnectionHandler_Close_Call) Run(run func()) *MockConnectionHandler_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnectionHandler_Close_Call) Return() *MockConnectionHandler_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConnectionHandler_Close_Call) RunAndReturn(run func()) *MockConnectionHandler_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Hostname provides a mock function with given fields:
func (_m *MockConnectionHandler) Hostname() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Hostname")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockConnectionHandler_Hostname_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hostname'
type MockConnectionHandler_Hostname_Call struct {
	*mock.Call
}

// Hostname is a helper method to define mock.On call
func (_e *MockConnectionHandler_Expecter) Hostname() *MockConnectionHandler_Hostname_Call {
	return &MockConnectionHandler_Hostname_Call{Call: _e.mock.On("Hostname")}
}

func (_c *MockConnectionHandler_Hostname_Call) Run(run func()) *MockConnectionHandler_Hostname_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnectionHandler_Hostname_Call) Return(_a0 string) *MockConnectionHandler_Hostname_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectionHandler_Hostname_Call) RunAndReturn(run func() string) *MockConnectionHandler_Hostname_Call {
	_c.Call.Return(run)
	return _c
}

// Messages provides a mock function with given fields:
func (_m *MockConnectionHandler) Messages() <-chan Message {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Messages")
	}

	var r0 <-chan Message
	if rf, ok := ret.Get(0).(func() <-chan Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan Message)
		}
	}

	return r0
}

// MockConnectionHandler_Messages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Messages'
type MockConnectionHandler_Messages_Call struct {
	*mock.Call
}

// Messages is a helper method to define mock.On call
func (_e *MockConnectionHandler_Expecter) Messages() *MockConnectionHandler_Messages_Call {
	return &MockConnectionHandler_Messages_Call{Call: _e.mock.On("Messages")}
}

func (_c *MockConnectionHandler_Messages_Call) Run(run func()) *MockConnectionHandler_Messages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnectionHandler_Messages_Call) Return(_a0 <-chan Message) *MockConnectionHandler_Messages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectionHandler_Messages_Call) RunAndReturn(run func() <-chan Message) *MockConnectionHandler_Messages_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: msg
func (_m *MockConnectionHandler) Send(msg string) (*Message, error) {
	ret := _m.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 *Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*Message, error)); ok {
		return rf(msg)
	}
	if rf, ok := ret.Get(0).(func(string) *Message); ok {
		r0 = rf(msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectionHandler_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockConnectionHandler_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - msg string
func (_e *MockConnectionHandler_Expecter) Send(msg interface{}) *MockConnectionHandler_Send_Call {
	return &MockConnectionHandler_Send_Call{Call: _e.mock.On("Send", msg)}
}

func (_c *MockConnectionHandler_Send_Call) Run(run func(msg string)) *MockConnectionHandler_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConnectionHandler_Send_Call) Return(_a0 *Message, _a1 error) *MockConnectionHandler_Send_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectionHandler_Send_Call) RunAndReturn(run func(string) (*Message, error)) *MockConnectionHandler_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnectionHandler creates a new instance of MockConnectionHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnectionHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnectionHandler {
	mock := &MockConnectionHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
