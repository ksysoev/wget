// Code generated by mockery v2.46.3. DO NOT EDIT.

//go:build !compile

package core

import (
	color "github.com/fatih/color"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockExecutionContext is an autogenerated mock type for the ExecutionContext type
type MockExecutionContext struct {
	mock.Mock
}

type MockExecutionContext_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutionContext) EXPECT() *MockExecutionContext_Expecter {
	return &MockExecutionContext_Expecter{mock: &_m.Mock}
}

// CommandMode provides a mock function with given fields: initBuffer
func (_m *MockExecutionContext) CommandMode(initBuffer string) (string, error) {
	ret := _m.Called(initBuffer)

	if len(ret) == 0 {
		panic("no return value specified for CommandMode")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(initBuffer)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(initBuffer)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(initBuffer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionContext_CommandMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommandMode'
type MockExecutionContext_CommandMode_Call struct {
	*mock.Call
}

// CommandMode is a helper method to define mock.On call
//   - initBuffer string
func (_e *MockExecutionContext_Expecter) CommandMode(initBuffer interface{}) *MockExecutionContext_CommandMode_Call {
	return &MockExecutionContext_CommandMode_Call{Call: _e.mock.On("CommandMode", initBuffer)}
}

func (_c *MockExecutionContext_CommandMode_Call) Run(run func(initBuffer string)) *MockExecutionContext_CommandMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockExecutionContext_CommandMode_Call) Return(_a0 string, _a1 error) *MockExecutionContext_CommandMode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionContext_CommandMode_Call) RunAndReturn(run func(string) (string, error)) *MockExecutionContext_CommandMode_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCommand provides a mock function with given fields: raw
func (_m *MockExecutionContext) CreateCommand(raw string) (Executer, error) {
	ret := _m.Called(raw)

	if len(ret) == 0 {
		panic("no return value specified for CreateCommand")
	}

	var r0 Executer
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (Executer, error)); ok {
		return rf(raw)
	}
	if rf, ok := ret.Get(0).(func(string) Executer); ok {
		r0 = rf(raw)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Executer)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(raw)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionContext_CreateCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCommand'
type MockExecutionContext_CreateCommand_Call struct {
	*mock.Call
}

// CreateCommand is a helper method to define mock.On call
//   - raw string
func (_e *MockExecutionContext_Expecter) CreateCommand(raw interface{}) *MockExecutionContext_CreateCommand_Call {
	return &MockExecutionContext_CreateCommand_Call{Call: _e.mock.On("CreateCommand", raw)}
}

func (_c *MockExecutionContext_CreateCommand_Call) Run(run func(raw string)) *MockExecutionContext_CreateCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockExecutionContext_CreateCommand_Call) Return(_a0 Executer, _a1 error) *MockExecutionContext_CreateCommand_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionContext_CreateCommand_Call) RunAndReturn(run func(string) (Executer, error)) *MockExecutionContext_CreateCommand_Call {
	_c.Call.Return(run)
	return _c
}

// EditorMode provides a mock function with given fields: initBuffer
func (_m *MockExecutionContext) EditorMode(initBuffer string) (string, error) {
	ret := _m.Called(initBuffer)

	if len(ret) == 0 {
		panic("no return value specified for EditorMode")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(initBuffer)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(initBuffer)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(initBuffer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionContext_EditorMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditorMode'
type MockExecutionContext_EditorMode_Call struct {
	*mock.Call
}

// EditorMode is a helper method to define mock.On call
//   - initBuffer string
func (_e *MockExecutionContext_Expecter) EditorMode(initBuffer interface{}) *MockExecutionContext_EditorMode_Call {
	return &MockExecutionContext_EditorMode_Call{Call: _e.mock.On("EditorMode", initBuffer)}
}

func (_c *MockExecutionContext_EditorMode_Call) Run(run func(initBuffer string)) *MockExecutionContext_EditorMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockExecutionContext_EditorMode_Call) Return(_a0 string, _a1 error) *MockExecutionContext_EditorMode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionContext_EditorMode_Call) RunAndReturn(run func(string) (string, error)) *MockExecutionContext_EditorMode_Call {
	_c.Call.Return(run)
	return _c
}

// FormatMessage provides a mock function with given fields: msg, noColor
func (_m *MockExecutionContext) FormatMessage(msg Message, noColor bool) (string, error) {
	ret := _m.Called(msg, noColor)

	if len(ret) == 0 {
		panic("no return value specified for FormatMessage")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(Message, bool) (string, error)); ok {
		return rf(msg, noColor)
	}
	if rf, ok := ret.Get(0).(func(Message, bool) string); ok {
		r0 = rf(msg, noColor)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(Message, bool) error); ok {
		r1 = rf(msg, noColor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionContext_FormatMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormatMessage'
type MockExecutionContext_FormatMessage_Call struct {
	*mock.Call
}

// FormatMessage is a helper method to define mock.On call
//   - msg Message
//   - noColor bool
func (_e *MockExecutionContext_Expecter) FormatMessage(msg interface{}, noColor interface{}) *MockExecutionContext_FormatMessage_Call {
	return &MockExecutionContext_FormatMessage_Call{Call: _e.mock.On("FormatMessage", msg, noColor)}
}

func (_c *MockExecutionContext_FormatMessage_Call) Run(run func(msg Message, noColor bool)) *MockExecutionContext_FormatMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Message), args[1].(bool))
	})
	return _c
}

func (_c *MockExecutionContext_FormatMessage_Call) Return(_a0 string, _a1 error) *MockExecutionContext_FormatMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionContext_FormatMessage_Call) RunAndReturn(run func(Message, bool) (string, error)) *MockExecutionContext_FormatMessage_Call {
	_c.Call.Return(run)
	return _c
}

// Print provides a mock function with given fields: data, attr
func (_m *MockExecutionContext) Print(data string, attr ...color.Attribute) error {
	_va := make([]interface{}, len(attr))
	for _i := range attr {
		_va[_i] = attr[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, data)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Print")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...color.Attribute) error); ok {
		r0 = rf(data, attr...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutionContext_Print_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Print'
type MockExecutionContext_Print_Call struct {
	*mock.Call
}

// Print is a helper method to define mock.On call
//   - data string
//   - attr ...color.Attribute
func (_e *MockExecutionContext_Expecter) Print(data interface{}, attr ...interface{}) *MockExecutionContext_Print_Call {
	return &MockExecutionContext_Print_Call{Call: _e.mock.On("Print",
		append([]interface{}{data}, attr...)...)}
}

func (_c *MockExecutionContext_Print_Call) Run(run func(data string, attr ...color.Attribute)) *MockExecutionContext_Print_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]color.Attribute, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(color.Attribute)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockExecutionContext_Print_Call) Return(_a0 error) *MockExecutionContext_Print_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionContext_Print_Call) RunAndReturn(run func(string, ...color.Attribute) error) *MockExecutionContext_Print_Call {
	_c.Call.Return(run)
	return _c
}

// PrintToFile provides a mock function with given fields: data
func (_m *MockExecutionContext) PrintToFile(data string) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for PrintToFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutionContext_PrintToFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrintToFile'
type MockExecutionContext_PrintToFile_Call struct {
	*mock.Call
}

// PrintToFile is a helper method to define mock.On call
//   - data string
func (_e *MockExecutionContext_Expecter) PrintToFile(data interface{}) *MockExecutionContext_PrintToFile_Call {
	return &MockExecutionContext_PrintToFile_Call{Call: _e.mock.On("PrintToFile", data)}
}

func (_c *MockExecutionContext_PrintToFile_Call) Run(run func(data string)) *MockExecutionContext_PrintToFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockExecutionContext_PrintToFile_Call) Return(_a0 error) *MockExecutionContext_PrintToFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionContext_PrintToFile_Call) RunAndReturn(run func(string) error) *MockExecutionContext_PrintToFile_Call {
	_c.Call.Return(run)
	return _c
}

// SendRequest provides a mock function with given fields: req
func (_m *MockExecutionContext) SendRequest(req string) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for SendRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutionContext_SendRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendRequest'
type MockExecutionContext_SendRequest_Call struct {
	*mock.Call
}

// SendRequest is a helper method to define mock.On call
//   - req string
func (_e *MockExecutionContext_Expecter) SendRequest(req interface{}) *MockExecutionContext_SendRequest_Call {
	return &MockExecutionContext_SendRequest_Call{Call: _e.mock.On("SendRequest", req)}
}

func (_c *MockExecutionContext_SendRequest_Call) Run(run func(req string)) *MockExecutionContext_SendRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockExecutionContext_SendRequest_Call) Return(_a0 error) *MockExecutionContext_SendRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionContext_SendRequest_Call) RunAndReturn(run func(string) error) *MockExecutionContext_SendRequest_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForResponse provides a mock function with given fields: timeout
func (_m *MockExecutionContext) WaitForResponse(timeout time.Duration) (Message, error) {
	ret := _m.Called(timeout)

	if len(ret) == 0 {
		panic("no return value specified for WaitForResponse")
	}

	var r0 Message
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Duration) (Message, error)); ok {
		return rf(timeout)
	}
	if rf, ok := ret.Get(0).(func(time.Duration) Message); ok {
		r0 = rf(timeout)
	} else {
		r0 = ret.Get(0).(Message)
	}

	if rf, ok := ret.Get(1).(func(time.Duration) error); ok {
		r1 = rf(timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionContext_WaitForResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForResponse'
type MockExecutionContext_WaitForResponse_Call struct {
	*mock.Call
}

// WaitForResponse is a helper method to define mock.On call
//   - timeout time.Duration
func (_e *MockExecutionContext_Expecter) WaitForResponse(timeout interface{}) *MockExecutionContext_WaitForResponse_Call {
	return &MockExecutionContext_WaitForResponse_Call{Call: _e.mock.On("WaitForResponse", timeout)}
}

func (_c *MockExecutionContext_WaitForResponse_Call) Run(run func(timeout time.Duration)) *MockExecutionContext_WaitForResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockExecutionContext_WaitForResponse_Call) Return(_a0 Message, _a1 error) *MockExecutionContext_WaitForResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionContext_WaitForResponse_Call) RunAndReturn(run func(time.Duration) (Message, error)) *MockExecutionContext_WaitForResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecutionContext creates a new instance of MockExecutionContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutionContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutionContext {
	mock := &MockExecutionContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
